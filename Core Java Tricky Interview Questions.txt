

Q: What if the main method is declared as private?
The program compiles properly but at runtime it will give "Main method not public." error.

Q: What if the static modifier is removed from the signature of the main method?
Program compiles. But at runtime throws an error "NoSuchMethodError".

Q: What if I write static public void instead of public static void?
Program compiles and runs properly.

Q: What if I do not provide the String array as the argument to the method?
Program compiles but throws a runtime error "NoSuchMethodError".

Q: What is the first argument of the String array in main method?
The String array is empty. It does not have any element. This is unlike C/C++ where the first element by default is the program name.

Q: If I do not provide any arguments on the command line, then the String array of Main method will be empty or null?
It is empty. But not null.

Q: How can one prove that the array is not null but empty using one line of code?
Print args.length. It will print 0. That means it is empty. But if it would have been null
then it would have thrown a NullPointerException on attempting to print args.length.

Q: What environment variables do I need to set on my machine in order to be able to run Java programs?
CLASSPATH and PATH are the two variables.

Q: Can an application have multiple classes having main method?
Yes it is possible. While starting the application we mention the class name to be run.
The JVM will look for the Main method only in the class whose name you have
mentioned. Hence there is not conflict amongst the multiple classes having main method.

Q: Do I need to import java.lang package any time? Why ?
No. It is by default loaded internally by the JVM.

Q: Can I import same package/class twice? Will the JVM load the package twice at runtime?
One can import the same package or same class multiple times. Neither compiler nor
JVM complains abt it. And the JVM will internally load the class only once no matter how many times you import the same class.

Q: Are the imports checked for validity at compile time? e.g. will the code containing an import such as java.lang.ABCD compile?
Yes the imports are checked for the semantic validity at compile time. 
The code containing above line of import will not compile. It will throw an error saying,can not resolve symbol
symbol : class ABCD
location: package io
import java.io.ABCD;

Q: Does importing a package imports the subpackages as well? e.g. Does importing com.MyTest.* also import com.MyTest.UnitTests.*?
No you will have to import the subpackages explicitly. 
Importing com.MyTest.* will import classes in the package MyTest only. It will not import any class in any of it's subpackage.

Q: What is the difference between declaring a variable and defining a variable?
In declaration we just mention the type of the variable and it's name. 
We do not initialize it. But defining means declaration + initialization.
e.g String s; is just a declaration while String s = new String ("abcd"); Or String s = "abcd"; are both definitions.

Q: Can a level class be private or protected?
No. A level class can not be private or protected. It can have either "public" or no modifier. 
If it does not have a modifier it is supposed to have a default access. 
If a level class is declared as private the compiler will complain that the "modifier
private is not allowed here". This means that a level class can not be private. Same is the case with protected.

Q: What type of parameter passing does Java support?
In Java the arguments are always passed by value .

Q: What are pass by reference and pass by value?
Pass By Reference means the passing the address itself rather than passing the value.
Pass by value means passing a copy of the value to be passed.

Q: Primitive data types are passed by reference or pass by value?
Primitive data types are passed by value.

Q: Objects are passed by value or by reference?
Java only supports pass by value. With objects, the object reference itself is passed
by value and so both the original reference and parameter copy both refer to the same object.

Q: Does Java provide any construct to find out the size of an object?
No there is not size of operator in Java. So there is not direct way to determine the size of an object directly in Java.

Q: Give a simplest way to find out the time a method takes for execution without using any profiling tool?
Read the system time just before the method is invoked and immediately after method returns. 
Take the time difference, which will give you the time taken by a method for execution.

long start = System.currentTimeMillis();
method ();
long end = System.currentTimeMillis ();
System.out.println ("Time taken for execution is " + (end - start));

Q: What is the difference between error and an exception?
An error is an irrecoverable condition occurring at runtime. Such as OutOfMemory error. These JVM errors and you can not repair them at runtime. 
While exceptions are conditions that occur because of bad input etc. e.g. FileNotFoundException will be thrown if the specified file does not exist. 
Or a NullPointerException will take place if you try using a null reference. 
In most of the cases it is possible to recover from an exception (probably by giving user a feedback for entering proper values etc.).

Q: What is the basic difference between the 2 approaches to exception handling.
try catch block and specifying the candidate exceptions in the throws clause? When should you use which approach?
In the first approach as a programmer of the method, you urself are dealing with the exception. 
This is fine if you are in a best position to decide should be done in case of an exception. 
Whereas if it is not the responsibility of the method to deal with it's own exceptions, then do not use this approach. 
In this case use the second approach. In the second approach we are forcing the caller of the method to catch the exceptions, 
that the method is likely to throw. This is often the approach library creators use. 
They list the exception in the throws clause and we must catch them. You will find the same approach throughout the java libraries we use.

Q: Is it necessary that each try block must be followed by a catch block?
It is not necessary that each try block must be followed by a catch block. 
It should be followed by either a catch block OR a finally block. 
And whatever exceptions are likely to be thrown should be declared in the throws clause of the method.

Q: How does a try statement determine which catch clause should be used to handle an exception?
When an exception is thrown within the body of a try statement, the catch clauses of the try statement are examined in the order in which they appear. 
The first catch clause that is capable of handling the exception is executed. The remaining catch clauses are ignored.
If we used the parent Excpetion in catch block before the another catch block where we used its child Excpetion then we will get compile time error.
Because it is already caught and it is unreachable code.

Q: If I write return at the end of the try block, will the finally block still execute?
Yes even if you write return as the last statement in the try block and no exception occurs, 
The finally block will execute and then the control return.

Q: If I write System.exit(0); at the end of the try block, will the finally block still execute?
No in this case the finally block will not execute because when you say System.exit(0); 
the control immediately goes out of the program, and thus finally never executes.

Q: How are Observer and Observable used?
Objects that subclass the Observable class maintain a list of observers. 
When an Observable object is updated it invokes the update() method of each of its observers to notify the observers that it has changed state. 
The Observer interface is implemented by objects that observe Observable objects.

Q: How does Java handle integer overflows and underflows?
It uses those low order bytes of the result that can fit into the size of the type allowed by the operation.

Q: Does garbage collection guarantee that a program will not run out of memory?
Garbage collection does not guarantee that a program will not run out of memory. 
It is possible for programs to use up memory resources faster than they are garbage collected. 
It is also possible for programs to create objects that are not subject to garbage collection

Q: What is the difference between preemptive scheduling and time slicing?
Under preemptive scheduling, the highest priority task executes until it enters the waiting or dead states or a higher priority task comes into existence. 
Under time slicing, a task executes for a predefined slice of time and then reenters the pool of ready tasks. 
The scheduler then determines which task should execute next, based on priority and other factors.

Q: When a thread is created and started, what is its initial state?
A thread is in the ready state after it has been created and started.

Q: What is the purpose of finalization?
The purpose of finalization is to give an unreachable object the opportunity to perform any cleanup processing before the object is garbage collected.

Q: What is the Locale class?
The Locale class is used to tailor program output to the conventions of a particular geographic, political, or cultural region.

Q: Can an unreachable object become reachable again?
An unreachable object may become reachable again. This can happen when the object's finalize() method is invoked and 
the object performs an operation which causes it to become accessible to reachable objects.

Q: What are some alternatives to inheritance?
Delegation is an alternative to inheritance. Delegation means that you include an instance of another class as an instance variable, 
and forward messages to the instance. It is often safer than inheritance because it forces you to think about each message you forward, 
because the instance is of a known class, rather than a new class, and because it doesn't force you to accept all the methods of the super class:
you can provide only the methods that really make sense. On the other hand, it makes you write more code, and it is harder to re-use (because it is not a subclass).

Q: Is Empty .java file a valid source file?
Yes, an empty .java file is a perfectly valid source file.

Q: Can a .java file contain more than one java classes?
Yes, a .java file contain more than one java classes, provided at the most one of them is a public class.

Q: Is main, next, delete, exit are keywords in Java?
No, main, next, delete, exit are not keywords in Java.

Q: What happens if you dont initialize an instance variable of any of the primitive types in Java?
Java by default initializes it to the default value for that primitive type. 
Thus an int will be initialized to 0, a boolean will be initialized to false.

Q: Can a public class MyClass be defined in a source file named YourClass.java?
No the source file name, if it contains a public class, must be the same as the public class name itself with a .java extension.

Q: Can main method be declared final?
Yes, the main method can be declared final, in addition to being public static.

Q: What will be the output of the following statement? System.out.println ("1" + 3);
It will print 13.

Q:What will be the default values of all the elements of an array defined as an instance variable?
If the array is an array of primitive types, then all the elements of the array will be
initialized to the default value corresponding to that primitive type. 
e.g. All the elements of an array of int will be initialized to 0, while that of boolean type will be initialized to false. 
Whereas if the array is an array of references (of any type), all the elements will be initialized to null.


Q: Describe synchronization in respect to multithreading.
With respect to multithreading, synchronization is the capability to control the access
of multiple threads to shared resources. Without synchonization, it is possible for one
thread to modify a shared variable while another thread is in the process of using or
updating same shared variable. This usually leads to significant errors.

Q: What is synchronization and why is it important?
With respect to multithreading, synchronization is the capability to control the access of multiple threads to shared resources. 
Without synchronization, it is possible for one thread to modify a shared object while another thread is in the
process of using or updating that object's value. This often leads to significant errors.

Q: What are synchronized methods and synchronized statements?
Synchronized methods are methods that are used to control access to an object.
A thread only executes a synchronized method after it has acquired the lock for the method's object or class. 
Synchronized statements are similar to synchronizedmethods. 
A synchronized statement can only be executed after a thread has acquired the lock for the object or class referenced in the synchronized statement.

Q: What method must be implemented by all threads?
All tasks must implement the run() method, whether they are a subclass of Thread or implement the Runnable interface.

Q: What is daemon thread and which method is used to create the daemon thread?
Daemon thread is a low priority thread which runs intermittently in the back ground
doing the garbage collection operation for the java runtime system. setDaemon() method is used to create a daemon thread.


Q: What are the steps in the JDBC connection?
While making a JDBC connection we go through the following steps :
Step 1 : Register the database driver by using :
Class.forName(\" driver classs for that specific database\" );
Step 2 : Now create a database connection using :
Connection con = DriverManager.getConnection(url,username,password);
Step 3: Now Create a query using :
Statement stmt = Connection.Statement(\"select * from TABLE NAME\");
Step 4 : Exceute the query :
stmt.exceuteUpdate();

Part 1

1. What is Spring Boot, and how does it differ from Spring Framework?

Spring Boot is a framework designed to simplify the development of Spring-based applications. 
It builds upon the Spring Framework. 

In spring framework we need to do a lot of xml or java based configuration. 
Also we need to add lots of dependencies and manage there version in pom.xml file.
Also we need configure tomcat externally to deploy application.

Dependency Resolution feature avoid version conflicts of dependencies.
Avoid additional configuration to minimize boilerplate code. 
Provide support for embedded Tomcat/Jetty, allowing applications to be run as standalone JAR files.
Provides production ready features like Actuator for monitoring and managing applications at runtime.


Q. What are the key features of Spring Boot?

 - Auto-configuration: Automatically configures Spring-based applications based on dependencies and defaults.
 - Starter dependencies: Pre-packaged dependencies that simplify the setup of specific application features or technologies.
 - Developer tools: Provide automatic application restarts and live reload.
 - Actuator: Provides health and metrics endpoints for monitoring and managing applications at runtime.


Q. What are the components of the spring boot application?

Core Components of a Spring Boot Application:

Main Application Class annotated with @SpringBootApplication for entry point.

Auto-Configuration, Spring Boot’s @EnableAutoConfiguration automatically configures beans based on the application’s dependencies and environment. 
For example, if spring-boot-starter-web is on the classpath, it configures a DispatcherServlet for handling web requests.

Starter dependencies include pre-configured dependencies, reducing the need for manual configuration.

application.properties or application.yml file for externalized configuration.

Embedded Server, Spring Boot applications run as standalone programs with an embedded server like Tomcat, Jetty, or Undertow. 
This eliminates the need to deploy the application in an external server.

Beans: Spring-managed objects defined using @Component or Java configuration.

Dependency Injection, Spring Boot uses dependency injection to manage and wire components. 
Beans are injected into each other automatically using annotations like @Autowired, @Qualifier, or constructor injection.


Q. Explain the concept of Spring Boot starters and provide an example.

Starters in Spring Boot are a set of dependencies that make it easier to configure and use specific features or technologies in an application. 
They encapsulate the required dependencies and configurations, allowing developers to add them to their projects with minimal effort.
For example, the spring-boot-starter-web starter includes all the necessary dependencies for building 
web applications including the Spring MVC framework, embedded web server, and JSON support.


Q. What dependencies are required for a Spring Boot project?

In a Spring Boot project, dependencies are managed using Maven or Gradle, and Spring Boot provides pre-configured starter dependencies for common use cases.
For example, the core starter spring-boot-starter-parent, spring-boot-starter-web is used for web applications, 
spring-boot-starter-data-jpa for database interactions, and spring-boot-starter-test for testing, etc. 


2. What is the purpose of the SpringApplication.run() method or How run method works internally?

The SpringApplication.run() method is present in @SpringBootApplication annotated class main method which is the application's entry point.

The run() method initializes the Spring application context based on webApplicationType, registers beans into context, 
performs auto-configuration, starts the embedded tomcat server, and starts the application lifecycle. 
It returns an instance of the ConfigurableApplicationContext.


3. What is the purpose of the @SpringBootApplication annotation?

The @SpringBootApplication annotation is a combination of three annotation @Configuration, @EnableAutoConfiguration, and @ComponentScan. 
It serves as the entry point for the Spring Boot application. 

@Configuration for specifying this is configuration class.
@EnableAutoConfiguration to enable auto configuration and load required things based on classpath and provided dependencies.
@ComponentScan will scan all the subpackeges for spring managed beans.


4. Can I use this three annotation instead of using one @SpringBootApplication annotation?
Yes, also our application will run as expected.


Q. How component scanning works.

Component scanning in Spring Boot is an automatic mechanism triggered by the @SpringBootApplication annotation. 
It scans the package where the main application class presents and its sub-packages for components 
annotated with @Component, @Service, @Repository, and other stereotypes. 

This simplifies bean registration and configuration in application context. 
Also we can customize the scanning behavior using the @ComponentScan annotation and basePackages and excludeFilters attribute.


5. Describe the Spring Boot auto-configuration mechanism.

The Spring Boot auto-configuration mechanism automatically configures the Spring application based on the dependencies present in the classpath. 
By analyzing the dependencies present in the classpath, 
It matches all the conditions applied to the auto-configuration class to determine it should be enabled or disabled.
This makes it easier to start and configure a Spring application.


6. How can you disable a specific auto-configuration class in Spring Boot?

By defining exclude attribute with Auto-configuration class names with @SpringBootApplication annotation.
Another way is we can add spring.autoconfigure.exclude key in properties file and giving multilple values of fully qualified Auto-configuration class names.


7. How can you customize the default configuration in Spring Boot?

By providing our own configuration properties in application.properties or application.yml file
we can override the default configuration.
For Ex. by defining custom port number for tomcat like server.port=8081 we are overriding it with default 8080.


8. What is CommandLineRunner in Spring Boot?

CommandLineRunner is a functional interface in spring boot which contains a single run method.
If we want to execute anything at the time of application startup like DB Connection, Populate some data into DB then those logic we can write in this method.
But SpringApplication.run() method will execute first then this run method will execute.


Part 2

9. Can you explain the purpose of stereotype annotations in Spring Framework?

Stereotype annotations are used to define a role or purpose of a class within the spring application.

There are 5 stereotype annotations in spring.
@Component 		- This is parent stereotype annotation
@Service		- This is inherited from @Component
@Repository		- This is inherited from @Component
@Controller		- This is inherited from @Component
@RestController	- This is inherited from @Controller


10. How can you define a bean in Spring Framework?

First ways is by using stereotype annotation on a class to tell spring boot to manage the lifecycle of the bean.
Second way is by doing java based configuration in configuration class providing methods annotated with @Bean that return the object of class. 


13. Where you would choose to use the setter injection over constructor injection and vice versa?

When the dependency is manadatory for a bean and it must be injected then I will go for constructor injection.
The dependency is immutable in nature in constructor injection.
We can not resolve circular dependency error in constructor injection.

When the dependency is optional for a bean then I will go for setter injection.
The dependency is mutable in nature in setter injection.
We can easily resolve circular dependency error in setter injection.


14. What is @PostConstruct annotation? Can you provide a real world use case where @PostConstruct is particularly useful?

@PostConstruct annotation is used on a method where we can write any preprocessing logic 
that should be executed when the bean is initialize and dependencies are injected before going to use the bean.

We can use @PostConstruct in real world use case like while connection pool logic, data seeding, any objects we need to instanciate.


15. How can we dynamically load values in a Spring Boot application?

By using @Value("${key specified in properties file}") annotation on a field.
Or by using Enviornment object getProperty("key specified in properties file") method.


16. Can you explain the key difference between yml and properties file, and in what scenarios you might prefer one format over the other?

Syntax and Structure:
	We are repeating the key prefix in properties file because of flat structure.
	But in yml because of hierarchy structure key prefix won't repeate. This is more human readable.
	
List and Array Values:
	In yml file there is a support of List and Array values to specify.
	But in properties file we have to specify the List and Arrays values by separating by ,
	
Complex Data Types:
	In properties file we can use only String and Integer type of values.
	But in yml file we can use complex data types for values.
	

17. What is the difference between yml and yaml?

There is no difference between yml and yaml extension.


18. If I will configure same values in both yml and properties file then which value will be loaded in spring boot 
or who will load the value first properties or yml file?

Application.properties file will get more precedence than yml file and it will load the value first.


19. How to load external properties file in Spring Boot?

By using spring.config.import key in properties file and specifying file path as value.


20. How to map or bind config properties to Java objects? 

By annotating the the class with @ConfigurationProperties annotation and giving prefix attribute with prefix name.
And specifying remaining keys as filed name in java class.

ex. 
	@Configuration
	@ConfigurationProperties(prefix = "spring.datasource")
	public DataSourceCofig {
		private String username;
		private String password;
	}
	

Q. How can we externalize the configuration in spring boot project? 

The most common approach is using application.properties or application.yml files, which define various configurations such as database settings, logging levels, etc. 
For environment-specific configurations, we can use profile-specific property files, such as application-dev.properties or application-prod.properties.

Another way to externalize configuration is by using command-line arguments or environment variables. 
This properties can be injected directly into Spring Beans using @Value or @ConfigurationProperties annotation.

For advanced use cases, Spring Cloud Config can be used to centralize configuration management, especially in microservices architectures. 
This allows all services to pull their configuration from a central repository, making it easier to manage configurations across different environments.
 
	
	
Part 3

21. How will you resolve bean dependency ambiguity? 

If we have 2 bean of a same type for a dependency then spring gets confused which class it should inject.
This problem is called as dependency ambiguity. Spring will throw an error saying required a single bean, but 2 were found.

By using @Qualifier annotation with the name of bean which should be injected in camlecase we can tell the spring boot.
It is provided by Spring Framework and bean will be injected by type.


22. Can we avoid this dependency ambiguity without using @Qualifier? 

Yes, we can use @Resource(name = "bean name") annotation over the dependency.
It is provided by Java Library and the bean will be injected by name.


23. What is bean scope and can you explain different type of bean scope? 

Bean scopes determines how long a bean instance will live and when it will be created or destroyed. 
Its all about the bean lifecycle.


24. How to define custom bean scope? 

By implementing the Scope interface providing the implementation for the overriden methods.


25. Can you provide a few real-time use cases for when to choose Singleton scope and Prototype scope?

Singleton:
	For database configuration class.
	For application configuration class.
	
Prototype:
	For user session.
	When thread safety is required when multilple threads are concurrently working on same bean.


26. Can we inject prototype bean in singleton bean? if yes what will happen if we inject prototype bean in singleton bean? 

Yes, but only one instance of a prototype bean will be created in application context. 

We can resolve this problem by using @Lookup annotation which will create a dynamic proxy for prototype bean.


27. What is difference between spring singleton and plain singleton? 

Spring singleton scope is limited to one application context.
Plain singleton object is limited to one JVM.


28. What is the purpose of the BeanPostProcessor interface in Spring, and how can you use it to customize bean initialization and destruction?

Before and after initializing the bean if we want to customize something on your bean then we can perform this using BeanPostProcessor interface.
There are two default methods in BeanPostProcessor postProcessBeforeInitialization and postProcessAfterInitialization.
We can write our logic in this methods so that it will executed before and after bean initialization.

Real time use cases of BeanPostProcessor are
Aspect-Oriented Programming
Custom Initialization Logic
Proxy Creation
Monitoring and Logging


Part 4

Q. Can you explain the flow of APIs across different Spring Boot layers?

In a Spring Boot application, the flow of an API starts with the controller layer, which handles incoming HTTP requests. 
The controller delegates the request to the service layer, where the business logic is processed. 
The service layer interacts with the repository layer to fetch or manipulate data in the database. 
The response flows back from the repository to the service layer, which processes it further if needed, and then to the controller layer. 
Finally, the controller sends the response to the client in the desired format. 
This layered MVC architecture ensures separation of concerns and makes the application modular, maintainable, and testable.


29. Have you worked on Restful web services? If yes What all HTTP methods have you used in your project? 

Yes, I have used HTTP methods like GET, POST, PUT, DELETE, PATCH in my project.


30. How can you specify the HTTP method type for your REST endpoint? 

Lets say we have to retrive data then we need to use @GetMapping annotation over a method.
Also we can pass a value as path variable in url and map it to method parameter by using @PathVariable annotation.


Q. What is REST and what are its principles?  

REST (Representational State Transfer) is an architectural style for designing web services that use HTTP for communication. It follows six principles:  
- Stateless: Each request is independent, and the server does not store client state i.e session.  
- Client-Server: Separation of concerns between client and server.  
- Cacheable: Responses can be cached to improve performance.  
- Uniform Interface: Uses standard HTTP methods (GET, POST, PUT, DELETE).  
- Layered System: Multiple layers (security, caching, etc.) can exist between client and server.  
- Code on Demand (Optional): Server can send executable code to clients (e.g., JavaScript).  


Q. What is the difference between REST and SOAP?
  
- REST is lightweight, uses JSON/XML, and relies on simple HTTP methods.  
- SOAP is protocol-based, uses XML only, and follows a strict messaging structure.  
- REST is faster, supports caching, and is more scalable than SOAP.  
- SOAP is more secure (supports WS-Security) and used in enterprise applications like banking.  


Q. What is the difference between PUT and POST? 
 
- PUT is used to update an existing resource or create one if it does not exist. 
  It is idempotent in nature means multiple identical requests to put will give the same result. GET, PUT, DELETE are idempotent. 
- POST is used to create a new resource. 
  It is not idempotent in nature means multiple identical requests create multiple resources on server.   


Q. What is the difference between Put and Patch HTTP method? 

 1. PUT (Full Update)
- Replaces the entire resource with the new data.
- If a field is missing in the request body, it will be removed in the updated resource.
- Idempotent (Multiple identical requests result in the same outcome).  

 2. PATCH (Partial Update)
- Updates only specific fields without modifying other existing fields.
- Not necessarily idempotent (depends on the implementation).  


Q. What is the difference between URI and URL? 
 
- URI (Uniform Resource Identifier) is a unique identifier for a resource (can be a name or a location).  
- URL (Uniform Resource Locator) is a type of URI that provides the resource's location.  
Example:  
- URI: `https://example.com/users`  
- URL: `https://example.com/users/123` (specifies where the resource is located)  

Every URL is a URI, but not every URI is a URL.  


Q. What is HATEOAS in REST? 
 
HATEOAS (Hypermedia As The Engine Of Application State) is a REST principle where API responses include links to related actions.  
Example:
{
  "id": 1,
  "name": "Abhishek",
  "links": [
    { "rel": "self", "href": "/users/1" },
    { "rel": "orders", "href": "/users/1/orders" }
  ]
}
This allows the client to navigate the API dynamically without hardcoding URLs.  


31. Can you design a rest endpoint, Assume that you have a product database, and your task is to create an API to filter a list of products by productType. 

@GetMapping("/getProductsByType/{productType}")
public ResponseEntity<Object> getProductsByType(@PathVariable String productType){}


32. Design endpoints in a way that takes "productType" as input. 
If the user provides this input, the endpoint should filter products based on the specified condition. 
If "productType" is not provided, the endpoint should return all the products. 

@GetMapping("/getProducts")
public ResponseEntity<List<Product>> getProducts(@RequestParam(value = "productType", required = false) String productType){}


33. What is the difference between @PathVariable and @RequestParam? 

@PathVariable is manadatory and if we not provide the value in url then server will return 404 not found.
@RequestParam is optional by defining required=false hence if we provide value or not still our endpoint get executed.


Q. What is the difference between Path Param and Query Param?

Path Parameter is part of the URL path and is used to identify a specific resource.
Example: /users/{id} → /users/123 (Fetch user 123)

Query Parameter is used to filter or modify a request and is sent after ? in the URL.
Example: /users?role=admin&page=2 (Fetch admin users on page 2)


34. Why did you use @RestController and why not @Controller? 

@Controller always expect modelAndView to be return and if we want to return any other type then we have to use @ResponseBody annotation.
@RestController is combination of @Controller and @ResponseBody hence we can return any type of value by using it.


19. What is the purpose of the @RequestMapping annotation in Spring Boot?

The @RequestMapping annotation is used to map HTTP requests to specific handler methods in a Spring Boot application. 
It is applied at the method or class level to define the URL patterns that should trigger the execution of the annotated method.

@RequestMapping allows developers to specify various attributes, such as the HTTP method (GET, POST, etc.), 
request parameters, headers, and more to further refine the mapping.


35. How can we deserialize a JSON request payload into an object within a Spring MVC controller? 

We need to create a DTO for request payload with same key name as variable names. 
@RequestBody annotation will map the JSON object to Java object by deserializing it.


36. Can we perform update operation in POST http method if yes then why do we need PUT mapping or put http method? 

Yes, but Post is non-idempotent in nature means it will create a new resource on a server every time when we hit the url.
but Put is idempotent in nature means it will not create a new resource on a server when we hit the url.


37. Can we pass Request Body in GET HTTP method? 

Yes, we can pass request body in Get method but it is not recommanded to use.


38. How can we perform content negotiation (XML/JSON) in Rest endpoint? 

We need to specify produces attribute with application/json or application/xml as value.
For xml we have to add jackson.dataformat.xml dependency in pom.xml file.


39. What all status code you have observed in your application? 

- 400: Bad Request for wrong input
- 404: Not Found when url is not correct or not found
- 401: Authentication Error For wrong creads 
- 403: Not Authorize for Successfull Authentication but not access to specific functionality
- 405: Method Not Allowed for accessing Post method with GET
- 415: Unsupported MediaType when request needs JSON and we are sending xml
- 500: Internal Server Error when server encounterd a problem
- 502: Bad Gateway
- 200: Ok for successful request and getting response
- 201: Created for successful request and a new resource is created on server 


40. How can you customize the status code for your endpoint? 

By using @ResponseStatus(HttpStatus.Created) annotation.


41. How can you enable cross origin? 
We can use the @CrossOrigin(origins = "/") annotation over controller class.
or globally configure CORS using a WebMvcConfigurer bean in configuration class.
The annotation allows you to specify the allowed origins, HTTP methods, headers, and other CORS-related settings.
Enabling CORS ensures that web browsers can make requests to your application from different domains.


42. How can you upload or download a file in spring? 

By using MultipartFile object as a method parameter in controller, Spring Boot automatically binds uploaded files to it.

For file download, you can return the file as a response with appropriate headers. 
Additionally, you can leverage storage services like Amazon S3 or Azure Blob Storage for file storage and retrieval.


43. How do you maintain versioning for your REST API? 

First way is by creating another API with version/url without changing the actual API.
Second way is by passing version in request param and by applying condition on it.
Third way is by passing version in request header and by applying condition on it.


44. How will you document your REST API? 

By using Swagger, we just need to add swagger dependency in pom.xml file and do some configuration if needed.


45. How can you hide certain REST endpoints to prevent them from being exposed externally? 

By using @Hidden annotation over our API.


46. How will you consume restful API?

We can use RestTemplate, FeignClient, Advance RestClient to consume any RESTful web services.

In FeignClient we have to use @FeignClient annotation over a class and give url and name of the service as attribute to the annotation.
And by defining REST enpoints in that class we can consume the Rest API of the another service.


Q. How will you consume asynchronous API?

We can use @Async + CompletableFuture, WebClient or Message Queue like ActiveMQ, RabbitMQ, Kafka.


Part 5 

47. How will you handle exceptions in your project? 

By annotating a class with @RestControllerAdvice and defining methods to handle the respective exceptions with @ExceptionHandler annotation 
we can tell spring boot to handle the exception if it occure. We can write the proper status code and message in this methods so that end 
user can get a meaningful error message.


48. How can you avoid defining handlers for multiple exceptions, or what is the best practise for handling exceptions? 

By defining one global exception and handler for our project and put our every business logic in try block. 
If any exception occure then throw our global exception from catch block with proper status code and error message.
So that spring will handle our global exception for multiple exceptions.


49. How will you validate or sanatize your input payload? 

We can use various annotations from jakarta.validatation.constraints package like @NotNull, @NotBlank, @Min, @Max, @Email and etc
over the fields of payload. And we have to tell spring boot to validate the payload for incomming request by defining @Valid annotation
before our payload in controller class.


51. How can you populate validation error message to the end user? 

By defining exception handler for MethodArgumentNotValidException in @RestControllerAdvice class.
In handler method we can get list of field errors and add the error messages in map and return it to user.


52. How can you define custom bean validatation? 

By defining a custom valiadtion annotation and providing an implementation to that annotation by using @Constraint annotation.
That implementation class should implements ConstraintValidator and override isValid method.


53. What is the purpose of the @Profile annotation in Spring Boot?

The @Profile annotation is used to enable or disable beans, configuration based on active profile.
This annotation will help you to use different settings for different environment like dev, test and prod.

	```java
	@Configuration
	@Profile("dev")
	public class DevConfig {
		@Bean
		public DataSource devDataSource() {
			return new DataSource("dev-database-url");
		}
	}

	@Configuration
	@Profile("prod")
	public class ProdConfig {
		@Bean
		public DataSource prodDataSource() {
			return new DataSource("prod-database-url");
		}
	}
	```

We can define active profile by using spring.profiles.active property in properties or yml file.


Q. Profiling how you do that if you have to do like - Prod env, Dev env, and QA env?

We can use profile-specific property files, such as application-dev.properties or application-prod.properties.
We can define active profile by using spring.profiles.active property in properties or yml file.


54. use case: lets say you find a bug in production environment and now you want to debug the scenario, how can you do that from your local? 

By using @Profile annotation and setting spring.profiles.active property to local.


55. How can you enable a specific environment without using profiles? OR what is the alternative to profiles to achieving same use case? 

We can enable a specific environment by using @ConditionalOnProperty annotation.
Where we have to specify some attributes like prefix, name and havingValue.

ex. project.active.env=prod

	@ConditionalOnProperty(prefix="project.active", name="env", havingValue="prod")


56. What is the difference between @Profile and @ConditionalOnProperty? 

The @Profile annotation is used to load the beans or configuration based on the active profile.
But @ConditionalOnProperty annotation is used to load the beans or configuration based on 
the value of a specific property in properties file. 


15. How can you implement logging in a Spring Boot application?

In a Spring Boot application, logging is typically implemented using a logging framework such as Logback or Log4j2. 
Spring Boot provides a default logging configuration out of the box.

You can configure logging levels, appenders, and log formats using the application.properties or application.yml file. 
Additionally, you can include the desired logging framework dependencies in your project's build configuration and use the 
framework's APIs to perform logging within your application code.


20. How can you implement request and response logging in a Spring Boot application?

Request and response logging in a Spring Boot application can be implemented using filters or interceptors. 
Creating a custom filter or interceptor lets you intercept incoming requests and outgoing responses and log their details, 
such as headers, payloads, and other relevant information.

Spring Boot allows you to register these filters or interceptors in the application's configuration, enabling centralized logging across the application.


32. What is the purpose of the @Scheduled annotation in Spring Boot?

The @Scheduled annotation is used to configure scheduled tasks in a Spring Boot application. 
Applying this annotation to a method enables you to specify the schedule at which the method should be executed.

The schedule can be defined using various options such as fixed-rate, fixed-delay, or cron expressions. 
Spring Boot automatically detects and executes the scheduled methods based on the specified schedule.


13. Describe the role of the @Transactional annotation in Spring Boot.

The @Transactional annotation is used to mark a method or class for transaction management in Spring Boot. 
It ensures that the annotated method or all methods within the annotated class are executed within a transactional context.

The @Transactional annotation manages the transaction boundaries, rollback behavior, and other transactional aspects to ensure data consistency and integrity.


57. What is AOP? 

AOP provide a way to separate cross cutting conserns or secondary logic from the main buisness logic of our application.
Like transaction, logging, validatation, etc which we call as Aspects. 

Aspect means the class who contains the cross cutting conserns.


58. What is pointcut, join points and advice in AOP? 

Joinpoint means the target where we want to execute the particular aspect. ex. the method where we want to implement aspect.

Pointcut is an expression to tell to the AOP that who is your joinpoint. 

Advice means how you want to execute the aspect on a jointpoint for ex. before or after.


59. What are different type of advice in AOP? 

Before, After, AfterReturning, AfterThrowing, Around, etc.


60. What is the difference between After and AfterReturning advice in AOP?

After advice will always execute even though there is an exception in our joinpoint.

But AfterReturning will only execute if the joinpoint will successfully return any value without any exception.


61. use case - Can I use AOP to evaluate performance of a method or is this possible to design a logging framework to capture request and response body of a method?

By using Around advice.

Part 6

60. How does your application interact with the database and which framework are you using? 
61. Why is it important to configure a physical naming strategy ? (starts inline with que.61) 
62. What are the key benefits of using spring data JPA ? 
63. What are the differences between hibernate JPA and Spring Data JPA ? 
64. How can you connect multiple databases or data sources in a single application ? 
65. What are the different ways to define custom queries in spring Data JPA ? 
66. How will you define entity relationships or association mapping in spring Data JPA ? 
67. Is this possible to execute join query in spring data jpa ? if yes, how can you add some insights ? 
68. How will you implement pagination and sorting in Spring Data JPA ? 